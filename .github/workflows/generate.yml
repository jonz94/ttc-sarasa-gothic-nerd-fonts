name: generate ttc fonts from ttf fonts

on:
  # runs every 6 hours
  schedule:
    - cron: '0 */6 * * *'
  # allow manually trigger
  workflow_dispatch:

jobs:
  get-latest-tag:
    name: get latest tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ env.TAG }}
    steps:
      - name: Get latest release
        uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/jonz94/Sarasa-Gothic-Nerd-Fonts/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the latest tag without v prefix
        run: |
          TAG_WITH_V_PREFIX=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}
          echo "TAG=${TAG_WITH_V_PREFIX#v}" >> $GITHUB_ENV
      - name: Summary
        run: |
          echo "Latest tag without v prefix is $TAG"

  check:
    needs: get-latest-tag
    runs-on: ubuntu-latest
    outputs:
      should-update: ${{ env.SHOULD_UPDATE }}
      latest-version: ${{ env.LATEST_VERSION }}
      current-version: ${{ env.CURRENT_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check
        run: |
          # get the latest version
          LATEST_VERSION="${{ needs.get-latest-tag.outputs.tag }}"
          echo latest version of jonz94/Sarasa-Gothic-Nerd-Fonts is ${LATEST_VERSION}

          # get the current version
          CURRENT_VERSION=$(cat ${GITHUB_WORKSPACE}/VERSION)
          echo current version is ${CURRENT_VERSION}

          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

          if [[ "$LATEST_VERSION" == "$CURRENT_VERSION" ]]; then
            echo everything is up to date!
            echo "SHOULD_UPDATE=false" >> $GITHUB_ENV
          else
            echo a newer version is available
            echo "SHOULD_UPDATE=true" >> $GITHUB_ENV
          fi

  build:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.should-update == 'true' }}
    strategy:
      matrix:
        variants:
          [
            'regular',
            'italic',
            'bold',
            'bolditalic',
            'semibold',
            'semibolditalic',
            'light',
            'lightitalic',
            'extralight',
            'extralightitalic',
          ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download fonts
        run: |
          LATEST_VERSION="${{ needs.check.outputs.latest-version }}"
          LATEST_TAG="v${LATEST_VERSION}"

          echo latest tag of jonz94/Sarasa-Gothic-Nerd-Fonts is ${LATEST_TAG}
          env LATEST_TAG=${LATEST_TAG} bash download-fonts.sh

      - name: install build-essential
        run: sudo apt install build-essential -y

      # setup premake 5
      - name: install premake 5
        run: |
          curl -fsSL https://github.com/premake/premake-core/releases/download/v5.0.0-beta1/premake-5.0.0-beta1-linux.tar.gz -o premake-linux.tar.gz
          tar xf premake-linux.tar.gz
          mkdir -p ~/.local/bin
          mv premake5 ~/.local/bin
          rm premake-linux.tar.gz

      # setup otfccbuild & otfccdump
      - name: download otfcc
        run: |
          curl -fsSL https://github.com/caryll/otfcc/archive/refs/tags/v0.10.4.zip -o otfcc.zip
          unzip otfcc.zip
          mv otfcc-0.10.4 otfcc
      - name: build otfcc from source
        run: |
          cd otfcc
          premake5 gmake
          cd build/gmake
          make config=release_x64
          ln -sf ${GITHUB_WORKSPACE}/otfcc/bin/release-x64/otfccbuild ${HOME}/.local/bin/
          ln -sf ${GITHUB_WORKSPACE}/otfcc/bin/release-x64/otfccdump ${HOME}/.local/bin/
          cd ${GITHUB_WORKSPACE}

      # setup ttx
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: install fonttools for ttx
        run: pip install fonttools

      # setup otfcc-ttcize
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install otfcc-ttcize
        run: npm ci

      # generate ttc fonts
      - name: build
        run: env VARIANT=${{ matrix.variants }} bash build.sh
      - run: ls -l

      - name: upload generated ttc font
        uses: actions/upload-artifact@v3
        with:
          name: generated sarasa ${{ matrix.variants }} ttc font
          path: sarasa-${{ matrix.variants }}-nerd-font.ttc

  zip:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa regular ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa italic ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa bold ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa bolditalic ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa semibold ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa semibolditalic ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa light ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa lightitalic ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa extralight ttc font
      - uses: actions/download-artifact@v3
        with:
          name: generated sarasa extralightitalic ttc font

      - run: ls -l
      - name: zip patched font files
        run: zip -r sarasa-nerd-font-ttc.zip sarasa-*-nerd-font.ttc
      - run: ls -l
      - name: upload zip
        uses: actions/upload-artifact@v3
        with:
          name: sarasa-nerd-font-ttc.zip
          path: sarasa-nerd-font-ttc.zip

  commit-and-tag:
    name: commit and tag
    runs-on: ubuntu-latest
    needs: [check, zip]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.WORKFLOW_PERSONAL_ACCESS_TOKEN }}
      - name: commit
        run: |
          LATEST_VERSION="${{ needs.check.outputs.latest-version }}"
          echo $LATEST_VERSION > ${GITHUB_WORKSPACE}/VERSION
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "ðŸ¤– ci: update fonts to v${LATEST_VERSION}"
          git tag -a v${LATEST_VERSION} -m "ðŸŽ‰ build: release version v${LATEST_VERSION}"
          git push origin main --follow-tags
